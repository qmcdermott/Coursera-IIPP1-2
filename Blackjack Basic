# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play, outcome, score = False, "", 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []

    def __str__(self):
        s = "hand contains "
        for card in self.hand: s += str(card) + " "
        return s

    def add_card(self, card):
        self.hand.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        global hand_value
        hand_value, ace = 0, False
        for card in self.hand:
            if card.rank != 'A':
                hand_value += VALUES[card.rank]
                ace = False
            else:
                hand_value += VALUES[card.rank]
                ace = True             
        if hand_value + 10 < 21 and ace == True:
            hand_value += 10
        return hand_value

    def draw(self, canvas, pos):
        for i in range(len(self.hand)):
            self.hand[i].draw(canvas, [50 + CARD_SIZE[0]*i + 5*i, pos[1]])
            
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit,rank))
        
    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        global deck
        deal = self.deck[-1]
        self.deck.remove(deal)
        return deal
    
    def __str__(self):
        s = "The Deck contains "
        for card in self.deck:
            s += card.suit + card.rank + " "
        return s

#define event handlers for buttons
def deal():
    global outcome, in_play, DECK, PLAYER_HAND, DEALER_HAND, score
    if in_play == True:
        score -= 1
    DECK = Deck()
    PLAYER_HAND = Hand()
    DEALER_HAND = Hand()
    DECK.shuffle()
    PLAYER_HAND.add_card(DECK.deal_card())
    DEALER_HAND.add_card(DECK.deal_card())
    PLAYER_HAND.add_card(DECK.deal_card())
    DEALER_HAND.add_card(DECK.deal_card())
    outcome = "Hit? or Stand?"  
    in_play = True

def hit():
    global value, PLAYER_HAND, outcome, in_play, score
    value = PLAYER_HAND.get_value()
    if in_play == True:
        PLAYER_HAND.add_card(DECK.deal_card())
        if PLAYER_HAND.get_value() > 21:
            outcome = "You have BUSTED!"
            in_play = False
            
def stand():
    global outcome, value, in_play, score
    
    if in_play == True:
        while DEALER_HAND.get_value() < 17:
            DEALER_HAND.add_card(DECK.deal_card())
        in_play = False
        if DEALER_HAND.get_value() > 21:
            score += 1
            outcome = "Dealer BUSTED!"
        elif DEALER_HAND.get_value() < PLAYER_HAND.get_value():
            score += 1
            outcome = "You WIN! " + "New Deal?"
        else:
            score -= 1
            outcome = "Dealer WINS! " + "New Deal?"

# draw handler    
def draw(canvas):
    global DEALER_HAND, PLAYER_HAND, score
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text('Blackjack!', (225, 50), 36, 'Black', 'serif')
    canvas.draw_text("Dealer ", (50, 125), 36, 'Black', 'serif')
    canvas.draw_text("Player ", (50, 450), 36, 'Black', 'serif')
    canvas.draw_text(outcome, (175, 450), 36, 'Black', 'serif')
    canvas.draw_text("Score = " + str(score), (400, 125), 36, 'Black', 'serif')
    DEALER_HAND.draw(canvas, [50, 150])
    PLAYER_HAND.draw(canvas, [50, 300])
    if in_play == True:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [50 + CARD_BACK_CENTER[0], 150 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("DarkSlateBlue")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
