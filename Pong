# Implementation of classic arcade game Pong

import simplegui
import random
import math

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    ball_vel = [random.randrange(120, 240)/60,random.randrange(60, 180)/60] #[random.randrange(120, 240),random.randrange(60, 180)]
    if direction == RIGHT:
        ball_vel[1] = -ball_vel[1]
    elif direction == LEFT:
        ball_vel[0] = -ball_vel[0]
        ball_vel[1] = -ball_vel[1]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    paddle1_pos = [HALF_PAD_WIDTH, HEIGHT/2]
    paddle2_pos = [WIDTH-HALF_PAD_WIDTH, HEIGHT/2]
    paddle1_vel = 0
    paddle2_vel = 0
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    
    spawn_ball(LEFT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
            
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]

    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 5, "White", "White")    
    
    # collide and reflect off of the top and bottom of the canvas
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= (HEIGHT-1)-BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos[1] + paddle1_vel <= 360:
        paddle1_pos[1] += paddle1_vel
    else: 
        paddle1_pos[1] = 360
    if paddle2_pos[1] + paddle2_vel <= 360:
        paddle2_pos[1] += paddle2_vel
    else: 
        paddle2_pos[1] = 360
        
    if paddle1_pos[1] - paddle1_vel >= 40:
        paddle1_pos[1] += paddle1_vel
    else: 
        paddle1_pos[1] = 40
    if paddle2_pos[1] - paddle2_vel >= 40:
        paddle2_pos[1] += paddle2_vel
    else: 
        paddle2_pos[1] = 40
        
    # draw paddles
    canvas.draw_polygon([[paddle1_pos[0],paddle1_pos[1]+HALF_PAD_HEIGHT], [paddle1_pos[0],paddle1_pos[1]-HALF_PAD_HEIGHT]], PAD_WIDTH, 'White')
    canvas.draw_polygon([[paddle2_pos[0],paddle2_pos[1]+HALF_PAD_HEIGHT], [paddle2_pos[0],paddle2_pos[1]-HALF_PAD_HEIGHT]], PAD_WIDTH, 'White')
    
    # determine whether paddle and ball collide    
    if ball_pos[0] == BALL_RADIUS + PAD_WIDTH and ball_pos[1] in range(paddle1_pos[1]-HALF_PAD_HEIGHT,paddle1_pos[1]+HALF_PAD_HEIGHT):
        ball_vel[0] = - ball_vel[0]*2
    elif ball_pos[0] == (WIDTH-PAD_WIDTH)-BALL_RADIUS and ball_pos[1] in range(paddle2_pos[1]-HALF_PAD_HEIGHT,paddle2_pos[1]+HALF_PAD_HEIGHT):
        ball_vel[0] = - ball_vel[0]*2
    elif ball_pos[0] < BALL_RADIUS + PAD_WIDTH:
        score2 += 1
        spawn_ball(RIGHT)
    elif ball_pos[0] > (WIDTH-PAD_WIDTH)-BALL_RADIUS:
        score1 += 1
        spawn_ball(LEFT)
        
    # draw scores
    canvas.draw_text(str(score1), ((WIDTH-100) / 2, 50), 48, 'White')
    canvas.draw_text(str(score2), ((WIDTH+50) / 2, 50), 48, 'White')

def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 5
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel += acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel -= acc
    elif key==simplegui.KEY_MAP["w"]:
        paddle1_vel -= acc 
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    acc = 5
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel -= acc
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel -= acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["w"]:
        paddle1_vel += acc 

def reset():
    global ball_pos, ball_vel
    ball_pos = [WIDTH/2,HEIGHT/2]
    ball_vel = [random.randrange(2, 4),random.randrange(1, 3)]
    new_game()
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset", reset)


# start frame
new_game()
frame.start()
